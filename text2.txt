
void UCreatePlugBody(GLMesh& mesh) {

    // Specifies normalized device coordinates (x,y,z) and color for Triangle vertices
    GLfloat triangleOneVerts[] =
    {
        // Vertex Positions    // Colors (r,g,b,a)
    0.0f, 0.0f, -1.0f,	0.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 0.0f, -1.0f, 	0.0f, 1.0f, 0.0f, 1.0f,
    0.0f, 1.0f, -1.0f, 	0.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 1.0f, -1.0f, 	0.0f, 1.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 0.0f, 	0.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 0.0f, 0.0f, 	0.0f, 1.0f, 0.0f, 1.0f,
    0.0f, 1.0f, 0.0f, 	0.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 1.0f, 0.0f, 	0.0f, 1.0f, 0.0f, 1.0f



    };

    const GLuint floatsPerVertex = 3;
    const GLuint floatsPerColor = 4;

    GLushort triangleOneIndices[] = {

        0,1,2,
        0,4,2,
        2,6,4,
        1,2,3,
        2,6,3,
        3,6,7,
        1,5,3,
        5,3,7,
        4,5,6,
        5,6,7,
        0,1,4,
        1,4,5
    };

    
    
    //Cube 1

    glGenVertexArrays(4, &mesh.vao);
    glBindVertexArray(mesh.vao);


    glGenBuffers(4, mesh.vbos);
    glBindBuffer(GL_ARRAY_BUFFER, mesh.vbos[0]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(triangleOneVerts), triangleOneVerts, GL_STATIC_DRAW);

    //Data for the indices
    mesh.nVertices = sizeof(triangleOneIndices) / sizeof(triangleOneIndices[0]);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.vbos[1]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(triangleOneIndices), triangleOneIndices, GL_STATIC_DRAW);

    //Strides between vertex coordinates is 7
    GLint stride = sizeof(float) * (floatsPerVertex + floatsPerColor);


    glVertexAttribPointer(0, floatsPerVertex, GL_FLOAT, GL_FALSE, stride, 0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, floatsPerColor, GL_FLOAT, GL_FALSE, stride, (char*)(sizeof(float) * floatsPerVertex));
    glEnableVertexAttribArray(1);

   
}
